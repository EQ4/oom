//=========================================================
//  OOMidi
//  OpenOctave Midi and Audio Editor
//    $Id: canvas.h,v 1.3.2.8 2009/02/02 21:38:01 terminator356 Exp $
//  (C) Copyright 1999 Werner Schweer (ws@seh.de)
//=========================================================

#ifndef __CANVAS_H__
#define __CANVAS_H__

#include "citem.h"
#include "view.h"
#include "toolbars/tools.h"

#include <QWheelEvent>
#include <QMouseEvent>
#include <QKeyEvent>
#include <QIcon>
#include <QPixmap>
#include <QRect>
#include <QPainter>

class QMenu;

//---------------------------------------------------------
//   Canvas
//---------------------------------------------------------

class Canvas : public View
{
    Q_OBJECT
    QTimer *_scrollTimer;

    bool _doScroll;
    int _scrollSpeed;

    QPoint _evPos;
    bool _canScrollLeft;
    bool _canScrollRight;
    bool _canScrollUp;
    bool _canScrollDown;

protected:

    int _canvasTools;
    enum DragMode
    {
        DRAG_OFF, DRAG_NEW,
        DRAG_MOVE_START, DRAG_MOVE,
        DRAG_COPY_START, DRAG_COPY,
        DRAG_CLONE_START, DRAG_CLONE,
        DRAGX_MOVE, DRAGY_MOVE,
        DRAGX_COPY, DRAGY_COPY,
        DRAGX_CLONE, DRAGY_CLONE,
        DRAG_DELETE, DRAG_RESIZE,
		DRAG_LASSO_START, DRAG_LASSO,
		DRAG_RESIZE_LEFT, DRAG_IMPORT
    };

    enum DragType
    {
        MOVE_MOVE, MOVE_COPY, MOVE_CLONE
    };

    enum HScrollDir
    {
        HSCROLL_NONE, HSCROLL_LEFT, HSCROLL_RIGHT
    };

    enum VScrollDir
    {
        VSCROLL_NONE, VSCROLL_UP, VSCROLL_DOWN
    };

    CItemList _items;
    CItemList _moving;
    CItemList m_multiSelect;
    CItem* _curItem;
    Part* _curPart;
    int _curPartId;

    DragMode _drag;
    QRect _lasso;
    QPoint _start;
    QPoint _end;
    Tool _tool;
    unsigned _pos[4];

    HScrollDir _hscrollDir;
    VScrollDir _vscrollDir;
    int _button;
    Qt::KeyboardModifiers _keyState;
    QMenu* _itemPopupMenu;
    QMenu* _canvasPopupMenu;

	int _selectedProgramPos;
	bool _drawSelectedProgram;
	bool _drawPartLines;
	bool _drawPartEndLine;
	bool m_PartZIndex;

    void setCursor();
    virtual void viewKeyPressEvent(QKeyEvent* event);
    virtual void viewMousePressEvent(QMouseEvent* event);
    virtual void viewMouseMoveEvent(QMouseEvent*);
    virtual void viewMouseReleaseEvent(QMouseEvent*);
    virtual void draw(QPainter&, const QRect&);
    virtual void wheelEvent(QWheelEvent* e);

    virtual void mousePress(QMouseEvent*)
    {
    }
    virtual void keyPress(QKeyEvent*);
    virtual void mouseMove(QMouseEvent* event) = 0;

    virtual void mouseRelease(const QPoint&)
    {
    }
    virtual void drawCanvas(QPainter&, const QRect&) = 0;
    virtual void drawTopItem(QPainter& p, const QRect& rect) = 0;

    virtual void drawOverlay(QPainter&, const QRect&)
    {
    }

    virtual QRect overlayRect() const
    {
        return QRect(0, 0, 0, 0);
    }
    virtual void drawItem(QPainter&, const CItem*, const QRect&) = 0;
    virtual void drawMoving(QPainter&, const CItem*, const QRect&) = 0;
    virtual void updateSelection() = 0;
    virtual QPoint raster(const QPoint&) const = 0;
    virtual int y2pitch(int) const = 0; //CDW
    virtual int pitch2y(int) const = 0; //CDW

    virtual void moveCanvasItems(CItemList&, int, int, DragType, int*) = 0;
    // Changed by T356.
    //virtual bool moveItem(CItem*, const QPoint&, DragType, int*) = 0;
    virtual bool moveItem(CItem*, const QPoint&, DragType) = 0;
    virtual CItem* newItem(const QPoint&, int state) = 0;
    virtual void resizeItem(CItem*, bool noSnap = false) = 0;
    virtual void resizeItemLeft(CItem*, QPoint, bool noSnap = false) = 0;
    virtual void newItem(CItem*, bool noSnap = false) = 0;
    virtual bool deleteItem(CItem*) = 0;
    virtual void startUndo(DragType) = 0;

    virtual void endUndo(DragType, int flags) = 0;
    int getCurrentDrag();
    void updateCItemsZValues();

    /*!
       \brief Virtual member

       Implementing class is responsible for creating a popup to be shown when the user rightclicks an item on the Canvas
       \param item The canvas item that is rightclicked
       \return A QPopupMenu*
     */
    virtual QMenu* genItemPopup(CItem* /*item*/)
    {
        return 0;
    }

    /*!
       \brief Pure virtual member

       Implementing class is responsible for creating a popup to be shown when the user rightclicks an empty region of the canvas
       \return A QPopupMenu*
     */
    QMenu* genCanvasPopup(bool color = false);

    /*!
       \brief Virtual member

       This is the function called when the user has selected an option in the popupmenu generated by genItemPopup()
       \param item the canvas item the whole thing is about
       \param n Command type
       \param pt I think this is the position of the pointer when right mouse button was pressed
     */
    virtual void itemPopup(CItem* /*item */, int /*n*/, const QPoint& /*pt*/)
    {
    }
    void canvasPopup(int);

    virtual void startDrag(CItem*, bool)
    {
    }

    // selection
    virtual void deselectAll();
    virtual void selectItem(CItem* e, bool);

    virtual void deleteItem(const QPoint&);

    // moving
    void startMoving(const QPoint&, DragType);

    void moveItems(const QPoint&, int dir, bool rasterize = true);
    void endMoveItems(const QPoint&, DragType, int dir);

    virtual void selectLasso(bool toggle);

    virtual void itemPressed(const CItem*)
    {
    }

    virtual void itemReleased(const CItem*, const QPoint&)
    {
    }

    virtual void itemMoved(const CItem*, const QPoint&)
    {
    }

    virtual void curPartChanged()
    {
    }
	
	virtual void populateMultiSelect(CItem*)
	{
	}


    bool allItemsAreSelected();



public slots:
    void setTool(int t);
    void setPos(int, unsigned, bool adjustScrollbar);
    void scrollTimerDone(void);
    void redirectedWheelEvent(QWheelEvent*);
	void drawSelectedProgram(int, bool);
	void setDrawPartLines(bool v) 
	{
		_drawPartLines = v;
		update();
	}
	void setDrawPartEndLine(bool v) 
	{
		_drawPartEndLine = v;
		update();
	}

signals:
    void followEvent(int);
    void toolChanged(int);
    void verticalScroll(unsigned);
    void horizontalScroll(unsigned);
    void horizontalScrollNoLimit(unsigned);
public:
    Canvas(QWidget* parent, int sx, int sy, const char* name = 0);
	bool m_myLeftFlag;
	bool m_myRightFlag;
    bool isSingleSelection();
    int selectionSize();
    CItemList getItemlistForCurrentPart();
    CItemList getItemlistForPart(Part*);
    CItemList getSelectedItemsForCurrentPart();

    Tool tool() const
    {
        return _tool;
    }

    Part* part() const
    {
        return _curPart;
    }
    void setCurrentPart(Part*);

    void setCanvasTools(int n)
    {
        _canvasTools = n;
    }
	virtual bool isEventSelected(Event e);
	static bool smallerZValue(const CItem*, const CItem*);
	static QIcon colorRect(const QColor& color, const QColor& color2, int width, int height, bool selected = false)//{{{
	{
		QPainter painter;
		QPixmap image(width, height);
		painter.begin(&image);
		painter.setBrush(selected ? color2 : color);
		QRect rectangle(0, 0, width, height);
		painter.drawRect(rectangle);
		painter.setPen(selected ? color : color2);
		painter.drawLine(0,(height/2)-1,width,(height/2)-1);
		painter.drawLine(0,(height/2),width,(height/2));
		painter.drawLine(0,(height/2)+1,width,(height/2)+1);
	
		painter.drawLine((width/2)-12,(height/2)+15,(width/2)-12,(height/2)-15);
		painter.drawLine((width/2)-13,(height/2)+15,(width/2)-13,(height/2)-15);
		painter.drawLine((width/2)-14,(height/2)+15,(width/2)-14,(height/2)-15);
		painter.drawLine((width/2)-18,(height/2)+5,(width/2)-18,(height/2)-5);
		painter.drawLine((width/2)-19,(height/2)+5,(width/2)-19,(height/2)-5);
		painter.drawLine((width/2)-20,(height/2)+10,(width/2)-20,(height/2)-10);
		painter.drawLine((width/2)-23,(height/2)+20,(width/2)-23,(height/2)-20);
		painter.drawLine((width/2)-24,(height/2)+10,(width/2)-24,(height/2)-10);
		painter.drawLine((width/2)-25,(height/2)+5,(width/2)-25,(height/2)-5);
	
		painter.drawLine((width/2)-5,(height/2)+15,(width/2)-5,(height/2)-15);
		painter.drawLine((width/2)-6,(height/2)+15,(width/2)-6,(height/2)-15);
		painter.drawLine((width/2)-7,(height/2)+15,(width/2)-7,(height/2)-15);
		painter.drawLine((width/2)-8,(height/2)+5,(width/2)-8,(height/2)-5);
		painter.drawLine((width/2)-9,(height/2)+5,(width/2)-9,(height/2)-5);
		
		painter.drawLine((width/2)+12,(height/2)+15,(width/2)+12,(height/2)-15);
		painter.drawLine((width/2)+13,(height/2)+15,(width/2)+13,(height/2)-15);
		painter.drawLine((width/2)+14,(height/2)+15,(width/2)+14,(height/2)-15);
		painter.drawLine((width/2)+18,(height/2)+5,(width/2)+18,(height/2)-5);
		painter.drawLine((width/2)+19,(height/2)+5,(width/2)+19,(height/2)-5);
		painter.drawLine((width/2)+20,(height/2)+10,(width/2)+20,(height/2)-10);
		painter.drawLine((width/2)+23,(height/2)+30,(width/2)+23,(height/2)-30);
		painter.drawLine((width/2)+24,(height/2)+20,(width/2)+24,(height/2)-20);
		painter.drawLine((width/2)+25,(height/2)+10,(width/2)+25,(height/2)-10);
		
		painter.end();
		QIcon icon(image);
		return icon;
	}//}}}

};
#endif

